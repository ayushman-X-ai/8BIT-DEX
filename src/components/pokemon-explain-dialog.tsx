"use client";

import { useState } from 'react';
import type { Pokemon, PokemonType } from '@/types/pokemon';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
  DialogFooter
} from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';
import { explainPokemonStrategy } from '@/ai/flows/pokemon-explainer';
import { capitalize } from '@/lib/pokemon-utils';
import { Sparkles } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';

interface PokemonExplainDialogProps {
  pokemon: Pokemon;
}

export function PokemonExplainDialog({ pokemon }: PokemonExplainDialogProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [explanation, setExplanation] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleExplain = async () => {
    setIsLoading(true);
    setExplanation('');
    try {
      const typeRes = await fetch(pokemon.types[0].type.url);
      if (!typeRes.ok) throw new Error("Could not fetch Pokémon's type details.");
      const typeData: PokemonType = await typeRes.json();
      
      const advantages = typeData.damage_relations.double_damage_to.map(t => t.name).join(', ') || 'none';
      const attackTypes = pokemon.moves.slice(0, 5).map(m => m.move.name).join(', ');

      const input = {
        pokemonName: capitalize(pokemon.name),
        pokemonType: pokemon.types.map(t => capitalize(t.type.name)).join(' / '),
        attackTypes: attackTypes,
        advantages: advantages,
      };

      const result = await explainPokemonStrategy(input);
      setExplanation(result.summary);

    } catch (error) {
        console.error("Failed to get explanation:", error);
        toast({
            variant: "destructive",
            title: "Error",
            description: "Could not generate Pokémon explanation. Please try again later.",
        });
        setIsOpen(false);
    } finally {
        setIsLoading(false);
    }
  };

  const handleOpenChange = (open: boolean) => {
    setIsOpen(open);
    if(open) {
        handleExplain();
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>
        <Button className="w-full bg-accent hover:bg-accent/90 text-accent-foreground">
            <Sparkles className="mr-2 h-4 w-4" />
            Explain This Pokémon
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 font-headline">
            <Sparkles className="text-accent"/>
            AI Strategy for {capitalize(pokemon.name)}
          </DialogTitle>
          <DialogDescription>
            A strategic summary generated by AI. May contain inaccuracies.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 min-h-[80px]">
          {isLoading && (
            <div className="space-y-2">
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-5/6" />
            </div>
          )}
          {explanation && <p className="text-sm text-foreground/90 leading-relaxed">{explanation}</p>}
        </div>
        <DialogFooter>
            <Button variant="outline" onClick={() => setIsOpen(false)}>Close</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
