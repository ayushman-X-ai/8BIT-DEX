"use client";

import { useState } from 'react';
import Image from 'next/image';
import type { Pokemon, PokemonType } from '@/types/pokemon';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
  DialogFooter
} from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';
import { explainPokemonStrategy } from '@/ai/flows/pokemon-explainer';
import { capitalize, formatPokemonId } from '@/lib/pokemon-utils';
import { Sparkles } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';
import { Separator } from '@/components/ui/separator';

interface PokemonExplainDialogProps {
  pokemon: Pokemon;
}

interface Evolution {
  id: number;
  name: string;
}

export function PokemonExplainDialog({ pokemon }: PokemonExplainDialogProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [explanation, setExplanation] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [evolutions, setEvolutions] = useState<Evolution[]>([]);
  const [isLoadingEvolutions, setIsLoadingEvolutions] = useState(false);
  const { toast } = useToast();

  const parseEvolutionChain = (chainNode: any): Evolution[] => {
    const evolutions: Evolution[] = [];
    if (!chainNode || !chainNode.evolves_to || chainNode.evolves_to.length === 0) {
      return [];
    }
    
    for (const evo of chainNode.evolves_to) {
      const urlParts = evo.species.url.split('/');
      const id = parseInt(urlParts[urlParts.length - 2]);
      evolutions.push({ id, name: capitalize(evo.species.name) });
      evolutions.push(...parseEvolutionChain(evo));
    }
    
    return evolutions;
  };

  const findNodeInEvolutionChain = (node: any, name: string): any | null => {
      if (node.species.name === name) return node;
      for(const nextNode of node.evolves_to) {
          const found = findNodeInEvolutionChain(nextNode, name);
          if (found) return found;
      }
      return null;
  }

  const handleExplain = async () => {
    setIsLoading(true);
    setIsLoadingEvolutions(true);
    setExplanation('');
    setEvolutions([]);

    // AI Explanation
    try {
      const typeRes = await fetch(pokemon.types[0].type.url);
      if (!typeRes.ok) throw new Error("Could not fetch Pokémon's type details.");
      const typeData: PokemonType = await typeRes.json();
      
      const advantages = typeData.damage_relations.double_damage_to.map(t => t.name).join(', ') || 'none';
      const attackTypes = pokemon.moves.slice(0, 5).map(m => m.move.name).join(', ');

      const input = {
        pokemonName: capitalize(pokemon.name),
        pokemonType: pokemon.types.map(t => capitalize(t.type.name)).join(' / '),
        attackTypes: attackTypes,
        advantages: advantages,
      };

      const result = await explainPokemonStrategy(input);
      setExplanation(result.summary);

    } catch (error) {
        console.error("Failed to get explanation:", error);
        toast({
            variant: "destructive",
            title: "Error",
            description: "Could not generate Pokémon explanation. Please try again later.",
        });
    } finally {
        setIsLoading(false);
    }

    // Evolution chain
    try {
      const speciesRes = await fetch(`https://pokeapi.co/api/v2/pokemon-species/${pokemon.id}/`);
      if (!speciesRes.ok) throw new Error('Could not fetch species data.');
      const speciesData = await speciesRes.json();

      if (speciesData.evolution_chain?.url) {
        const evolutionRes = await fetch(speciesData.evolution_chain.url);
        if (!evolutionRes.ok) throw new Error('Could not fetch evolution chain.');
        const evolutionData = await evolutionRes.json();
        
        const pokemonNode = findNodeInEvolutionChain(evolutionData.chain, pokemon.name);
        if (pokemonNode) {
            const parsedEvolutions = parseEvolutionChain(pokemonNode);
            setEvolutions(parsedEvolutions);
        }
      }
    } catch (error) {
       console.error("Failed to get evolutions:", error);
    } finally {
      setIsLoadingEvolutions(false);
    }
  };

  const handleOpenChange = (open: boolean) => {
    setIsOpen(open);
    if(open) {
        handleExplain();
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>
        <Button className="w-full bg-accent hover:bg-accent/90 text-accent-foreground">
            <Sparkles className="mr-2 h-4 w-4" />
            Explain This Pokémon
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 font-headline">
            <Sparkles className="text-accent"/>
            AI Strategy for {capitalize(pokemon.name)}
          </DialogTitle>
          <DialogDescription>
            A strategic summary generated by AI. May contain inaccuracies.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 space-y-4 max-h-[60vh] overflow-y-auto pr-2">
          {isLoading && (
            <div className="space-y-2 min-h-[80px]">
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-5/6" />
            </div>
          )}
          {explanation && <p className="text-sm text-foreground/90 leading-relaxed">{explanation}</p>}
        
          {(isLoadingEvolutions || (!isLoadingEvolutions && evolutions.length > 0)) && <Separator />}

          {isLoadingEvolutions && (
            <div className="space-y-2">
                <Skeleton className="h-5 w-1/3" />
                <div className="grid grid-cols-3 gap-4">
                  <div className="flex flex-col items-center gap-2">
                    <Skeleton className="h-20 w-20 rounded-md" />
                    <Skeleton className="h-4 w-16" />
                  </div>
                    <div className="flex flex-col items-center gap-2">
                    <Skeleton className="h-20 w-20 rounded-md" />
                    <Skeleton className="h-4 w-16" />
                  </div>
                </div>
            </div>
          )}

          {!isLoadingEvolutions && evolutions.length > 0 && (
            <div>
              <h4 className="font-semibold text-foreground mb-2">Evolutions</h4>
              <div className="grid grid-cols-3 gap-4">
                {evolutions.map(evo => (
                    <div key={evo.id} className="flex flex-col items-center text-center">
                      <div className="relative aspect-square w-20 h-20 bg-gray-100 dark:bg-gray-800 rounded-md p-2">
                        <Image
                          src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${evo.id}.png`}
                          alt={evo.name}
                          fill
                          className="object-contain"
                          sizes="80px"
                          data-ai-hint="pokemon character"
                        />
                      </div>
                      <p className="text-sm font-medium mt-1">{evo.name}</p>
                      <p className="text-xs text-muted-foreground">{formatPokemonId(evo.id)}</p>
                    </div>
                ))}
              </div>
            </div>
          )}
        </div>
        <DialogFooter>
            <Button variant="outline" onClick={() => setIsOpen(false)}>Close</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
